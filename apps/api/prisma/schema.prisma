generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        Int        @id @default(autoincrement()) @db.SmallInt
  name      String     @db.VarChar(255)
  province  Province
  musicians Musician[]

  @@unique([name, province])
  @@map("city")
}

model Subgenre {
  id    Int     @id @default(autoincrement()) @db.SmallInt
  name  String  @unique @db.VarChar(255)
  genre Genre
  music Music[]

  @@map("subgenre")
}

model Musician {
  id             String          @id @db.VarChar(255)
  name           String          @db.VarChar(255)
  dateAdded      DateTime        @default(now()) @map("date_added")
  cityId         Int             @map("city_id") @db.SmallInt
  isGroup        Boolean         @default(false) @map("is_group")
  appleLink      String?         @unique @map("apple_link") @db.VarChar(255)
  bandcampLink   String?         @unique @map("bandcamp_link") @db.VarChar(255)
  soundcloudLink String?         @unique @map("soundcloud_link") @db.VarChar(255)
  spotifyLink    String?         @unique @map("spotify_link") @db.VarChar(255)
  youtubeLink    String?         @unique @map("youtube_link") @db.VarChar(255)
  disbanded      DateTime?       @db.Date
  city           City            @relation(fields: [cityId], references: [id])
  music          MusicianMusic[]

  @@map("musician")
}

model Music {
  id             String          @id @db.VarChar(255)
  name           String          @db.VarChar(255)
  musicType      MusicType       @map("music_type")
  release        DateTime        @db.Date
  dateAdded      DateTime        @default(now()) @map("date_added")
  instrumental   Boolean         @default(false)
  subgenreId     Int             @map("subgenre_id") @db.SmallInt
  nonCanadians   String[]        @map("non_canadians") @db.VarChar(255)
  appleLink      String?         @unique @map("apple_link") @db.VarChar(255)
  bandcampLink   String?         @unique @map("bandcamp_link") @db.VarChar(255)
  soundcloudLink String?         @unique @map("soundcloud_link") @db.VarChar(255)
  spotifyLink    String?         @unique @map("spotify_link") @db.VarChar(255)
  youtubeLink    String?         @unique @map("youtube_link") @db.VarChar(255)
  hasCover       Boolean         @default(false) @map("has_cover")
  copyright      String?         @db.VarChar(255)
  subgenre       Subgenre        @relation(fields: [subgenreId], references: [id])
  musicians      MusicianMusic[]

  @@index([musicType, release(sort: Desc)])
  @@map("music")
}

model MusicianMusic {
  musicianId  String   @map("musician_id") @db.VarChar(255)
  musicId     String   @map("music_id") @db.VarChar(255)
  musicRef    Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  musicianRef Musician @relation(fields: [musicianId], references: [id])

  @@id([musicianId, musicId])
  @@map("musician_music")
}

enum Province {
  AB
  BC
  MB
  NB
  NL
  NS
  NT
  NU
  ON
  PE
  QC
  SK
  YT
}

enum Genre {
  COUNTRY
  ELECTRONIC
  EXPERIMENTAL
  FOLK
  JAZZ
  METAL
  POP
  RAP
  ROCK
}

enum MusicType {
  ALBUM
  EP
  SINGLE
  LIVE
  OTHER
  DELUXE
  REMIX
  COMPILATION
}
